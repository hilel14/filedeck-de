package org.hilel14.filedeck.de.gui;

import java.awt.event.ItemEvent;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.Preferences;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import org.apache.commons.dbcp2.BasicDataSource;
import org.hilel14.filedeck.de.Config;
import org.hilel14.filedeck.de.DataTool;
import org.hilel14.filedeck.de.Job;
import org.hilel14.filedeck.de.JobsManager;

/**
 *
 * @author hilel14
 */
public class CreateJobDialog extends javax.swing.JDialog {

    public static final Logger LOGGER = Logger.getLogger(CreateJobDialog.class.getName());
    static Preferences preferences = Preferences.userNodeForPackage(CreateJobDialog.class);
    private final String userName;
    private final JobsManager jobsManager;

    /**
     * Creates new form NewJobDialog
     *
     * @param parent
     * @param userName
     * @param config
     */
    public CreateJobDialog(java.awt.Frame parent, String userName, Config config) {
        super(parent, true);
        initComponents();
        loadPreferences();
        this.userName = userName;
        jobsManager = new JobsManager(config);
        try {
            initEnvelopeLists(config.getDataSource());
        } catch (SQLException ex) {
            LOGGER.log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    "Unable to get list of envelopes from database",
                    "FileDeck operation error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadPreferences() {
        // frame size and location
        int x = preferences.getInt("CreateJobDialog.left", 10);
        int y = preferences.getInt("CreateJobDialog.top", 25);
        int w = preferences.getInt("CreateJobDialog.width", 600);
        int h = preferences.getInt("CreateJobDialog.height", 300);
        setBounds(x, y, w, h);
    }

    private void storePreferences() {
        // frame size and location
        preferences.putInt("CreateJobDialog.left", getBounds().x);
        preferences.putInt("CreateJobDialog.top", getBounds().y);
        preferences.putInt("CreateJobDialog.width", getBounds().width);
        preferences.putInt("CreateJobDialog.height", getBounds().height);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        contentPanel = new javax.swing.JPanel();
        newJobLabel = new javax.swing.JLabel();
        newJobTextField = new javax.swing.JTextField();
        baseJobLabel = new javax.swing.JLabel();
        baseJobTextField = new javax.swing.JTextField();
        baseVersionLabel = new javax.swing.JLabel();
        baseVersionComboBox = new javax.swing.JComboBox<>();
        baseEnvelopesScrollPane = new javax.swing.JScrollPane();
        baseEnvelopesList = new javax.swing.JList<>();
        selectedEnvelopesScrollPane = new javax.swing.JScrollPane();
        selectedEnvelopesList = new javax.swing.JList<>();
        actionsPanel = new javax.swing.JPanel();
        createJobButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("FileDeck: New Job");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        contentPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        contentPanel.setLayout(new java.awt.GridBagLayout());

        newJobLabel.setText("Paper code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 2);
        contentPanel.add(newJobLabel, gridBagConstraints);

        newJobTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                newJobTextFieldKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        contentPanel.add(newJobTextField, gridBagConstraints);

        baseJobLabel.setText("Base job");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 2);
        contentPanel.add(baseJobLabel, gridBagConstraints);

        baseJobTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                baseJobTextFieldKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        contentPanel.add(baseJobTextField, gridBagConstraints);

        baseVersionLabel.setText("Base version");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 2);
        contentPanel.add(baseVersionLabel, gridBagConstraints);

        baseVersionComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                baseVersionComboBoxItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        contentPanel.add(baseVersionComboBox, gridBagConstraints);

        baseEnvelopesList.setToolTipText("Double click to add envelope to job");
        baseEnvelopesList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                baseEnvelopesListMouseClicked(evt);
            }
        });
        baseEnvelopesScrollPane.setViewportView(baseEnvelopesList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 2);
        contentPanel.add(baseEnvelopesScrollPane, gridBagConstraints);

        selectedEnvelopesList.setToolTipText("Double click to removeenvelope envelope from job");
        selectedEnvelopesList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectedEnvelopesListMouseClicked(evt);
            }
        });
        selectedEnvelopesScrollPane.setViewportView(selectedEnvelopesList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        contentPanel.add(selectedEnvelopesScrollPane, gridBagConstraints);

        getContentPane().add(contentPanel, java.awt.BorderLayout.CENTER);

        actionsPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        createJobButton.setText("Create");
        createJobButton.setEnabled(false);
        createJobButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createJobButtonActionPerformed(evt);
            }
        });
        actionsPanel.add(createJobButton);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        actionsPanel.add(cancelButton);

        getContentPane().add(actionsPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        storePreferences();
    }//GEN-LAST:event_formWindowClosing

    private void createJobButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createJobButtonActionPerformed
        Job job = new Job();
        job.setUserName(userName);
        job.setPaperCode(newJobTextField.getText().trim());
        if (baseVersionComboBox.getItemCount() > 0) {
            job.setBaseJob(baseJobTextField.getText().trim());
            job.setBaseVersion(baseVersionComboBox.getSelectedItem().toString());
        }
        for (int i = 0; i < selectedEnvelopesList.getModel().getSize(); i++) {
            job.getEnvelopes().add(selectedEnvelopesList.getModel().getElementAt(i));
        }
        try {
            jobsManager.createJob(job);
            this.dispose();
        } catch (IOException | SQLException ex) {
            LOGGER.log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    "Error when trying to create job " + job.getPaperCode(),
                    "FileDeck operation error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_createJobButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void newJobTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_newJobTextFieldKeyReleased
        baseJobTextField.setText(newJobTextField.getText().trim());
        updateControls();
    }//GEN-LAST:event_newJobTextFieldKeyReleased

    private void baseJobTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_baseJobTextFieldKeyReleased
        updateControls();
    }//GEN-LAST:event_baseJobTextFieldKeyReleased

    private void baseEnvelopesListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_baseEnvelopesListMouseClicked
        if (evt.getClickCount() == 2) {
            String env = baseEnvelopesList.getSelectedValue();
            if (env != null) {
                DefaultListModel model = (DefaultListModel) selectedEnvelopesList.getModel();
                if (!model.contains(env)) {
                    model.addElement(env);
                }
            }
        }
    }//GEN-LAST:event_baseEnvelopesListMouseClicked

    private void selectedEnvelopesListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectedEnvelopesListMouseClicked
        if (evt.getClickCount() == 2) {
            String env = selectedEnvelopesList.getSelectedValue();
            if (env != null) {
                DefaultListModel model = (DefaultListModel) selectedEnvelopesList.getModel();
                model.removeElement(env);
            }
        }
    }//GEN-LAST:event_selectedEnvelopesListMouseClicked

    private void baseVersionComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_baseVersionComboBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            selectedEnvelopesList.setModel(new DefaultListModel());
            fillSelectedEnvelopesList();
        }
    }//GEN-LAST:event_baseVersionComboBoxItemStateChanged
    private void updateControls() {
        baseVersionComboBox.removeAllItems();
        selectedEnvelopesList.setModel(new DefaultListModel());
        String baseJob = baseJobTextField.getText().trim();
        if (baseJob.matches("\\d{6}")) {
            Path baseJobFolder = jobsManager.findJobFolder(baseJob, "masters");
            if (Files.exists(baseJobFolder)) {
                try {
                    List<String> versions = jobsManager.getVersions(baseJob);
                    for (String version : versions) {
                        baseVersionComboBox.addItem(version);
                    }
                    baseVersionComboBox.setSelectedIndex(baseVersionComboBox.getItemCount() - 1);
                    // don't call fillSelectedEnvelopesList() here, it will be trigerd by baseVersionComboBoxItemStateChanged
                } catch (IOException ex) {
                    LOGGER.log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this,
                            "Unable to get versions for job " + baseJob,
                            "FileDeck operation error",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        enableCreateJobButton();
    }

    private void fillSelectedEnvelopesList() {
        String baseJob = baseJobTextField.getText().trim();
        String version = baseVersionComboBox.getSelectedItem().toString();
        DefaultListModel model = (DefaultListModel) selectedEnvelopesList.getModel();
        try {
            List<String> envelopes = jobsManager.getEnvelopes(baseJob, version);
            for (String envelope : envelopes) {
                model.addElement(envelope);
            }
        } catch (IOException ex) {
            LOGGER.log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,
                    "Unable to get envelopes for version " + version + " of job " + baseJob,
                    "FileDeck operation error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    private void enableCreateJobButton() {
        createJobButton.setEnabled(false);
        String paperCode = newJobTextField.getText().trim();
        if (paperCode.matches("\\d{6}")) {
            String baseJob = baseJobTextField.getText().trim();
            if (baseJob.matches("\\d{6}")) {
                createJobButton.setEnabled(true);
            }
        }
    }

    private void initEnvelopeLists(BasicDataSource dataSource) throws SQLException {
        // base envelopes
        String[] envelopes = new DataTool(dataSource).getAllEnvelopes();
        DefaultListModel model = new DefaultListModel();
        for (String envelope : envelopes) {
            model.addElement(envelope);
        }
        baseEnvelopesList.setModel(model);
        // selected envelopes
        selectedEnvelopesList.setModel(new DefaultListModel());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel actionsPanel;
    private javax.swing.JList<String> baseEnvelopesList;
    private javax.swing.JScrollPane baseEnvelopesScrollPane;
    private javax.swing.JLabel baseJobLabel;
    private javax.swing.JTextField baseJobTextField;
    private javax.swing.JComboBox<String> baseVersionComboBox;
    private javax.swing.JLabel baseVersionLabel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel contentPanel;
    private javax.swing.JButton createJobButton;
    private javax.swing.JLabel newJobLabel;
    private javax.swing.JTextField newJobTextField;
    private javax.swing.JList<String> selectedEnvelopesList;
    private javax.swing.JScrollPane selectedEnvelopesScrollPane;
    // End of variables declaration//GEN-END:variables

}
